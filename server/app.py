from flask import Flask, request, jsonify
import numpy as np
# import tensorflow as tf
from flask_cors import CORS
from routes.auth import auth_bp  # Import the auth blueprint
from PIL import Image
import io
import random

app = Flask(__name__)
CORS(app, origins=["http://localhost:5173"])  # This enables CORS for all routes
app.register_blueprint(auth_bp)  # Register the auth blueprint

# Mock model for now - will be replaced with actual model later
class_names = ["Apple Scab", "Apple Rust", "Corn Blight", "Healthy", "Tomato Bacterial Spot"]
model_loaded = True

@app.errorhandler(Exception)
def handle_exception(e):
    response = jsonify({"error": str(e)})
    response.status_code = 500
    response.headers.add("Access-Control-Allow-Origin", "http://localhost:5173")
    response.headers.add("Access-Control-Allow-Credentials", "true")
    return response

@app.route('/')
def home():
    return "AI Backend is Running"

# @app.route('/predict', methods=['POST'])
# def predict():
#     data = request.json
#     # Example: assuming data contains "features"
#     features = np.array(data['features']).reshape(1, -1)

#     if model:
#         prediction = model.predict(features)
#         result = prediction.tolist()
#         return jsonify({'prediction': result})
#     else:
#         return jsonify({'error': 'Model not loaded'})

@app.route('/recommend', methods=['POST'])
def recommend():
    data = request.json
    soil = data.get('soil_type', 'Unknown')
    pin = data.get('pin_code', '000000')
    # Mock temperature and crop recommendation logic
    temp = 25  # Example static temperature
    crop_rules = {
        'Loamy': ['Wheat', 'Sugarcane', 'Cotton'],
        'Sandy': ['Peanut', 'Watermelon', 'Potato'],
        'Clay': ['Rice', 'Soybean', 'Broccoli']
    }
    crops = crop_rules.get(soil, ['Maize', 'Barley'])
    rule = {"crops": crops}
    return jsonify({
        "temperature": temp,
        "soil": soil,
        "recommended_crops": rule["crops"],
        "source": "Generated by CropIQ"
    })

@app.route('/api/detect-soil', methods=['POST'])
def detect_soil():
    """Detect soil type from uploaded image"""
    try:
        # For now, return a mock soil type
        # In a real implementation, you would process the image with AI
        soil_types = ['Loamy', 'Sandy', 'Clay', 'Silty', 'Peaty', 'Chalky']
        detected_soil = random.choice(soil_types)
        
        return jsonify({
            "soil_type": detected_soil,
            "confidence": 0.85,
            "message": "Soil type detected successfully"
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/recommend-plants', methods=['POST'])
def recommend_plants():
    """Get plant recommendations based on soil type, location, and temperature"""
    try:
        data = request.json
        soil_type = data.get('soil_type', 'Loamy')
        location = data.get('location', 'Unknown')
        temperature = data.get('temperature', 25)
        
        # Plant recommendation logic based on soil type, temperature, and location
        recommendations = []
        
        # Define climate zones based on location (simplified)
        def get_climate_zone(location_name):
            location_lower = location_name.lower()
            if any(zone in location_lower for zone in ['tropical', 'india', 'tamil nadu', 'tamilnadu', 'chennai', 'madurai', 'coimbatore', 'salem', 'trichy', 'vellore', 'brazil', 'thailand', 'indonesia', 'malaysia', 'kerala', 'karnataka', 'andhra pradesh', 'telangana', 'maharashtra', 'gujarat', 'rajasthan', 'delhi', 'punjab', 'haryana', 'uttar pradesh', 'bihar', 'west bengal', 'odisha', 'assam', 'nagaland', 'manipur', 'mizoram', 'tripura', 'meghalaya', 'arunachal pradesh', 'sikkim', 'himachal pradesh', 'uttarakhand', 'jharkhand', 'chhattisgarh', 'madhya pradesh']):
                return 'tropical'
            elif any(zone in location_lower for zone in ['subtropical', 'florida', 'california', 'australia', 'south africa']):
                return 'subtropical'
            elif any(zone in location_lower for zone in ['temperate', 'europe', 'north america', 'china', 'japan']):
                return 'temperate'
            elif any(zone in location_lower for zone in ['cold', 'canada', 'russia', 'scandinavia', 'alaska']):
                return 'cold'
            else:
                return 'temperate'  # default
        
        climate_zone = get_climate_zone(location)
        
        # Comprehensive plant recommendations based on soil type, temperature, and climate
        if soil_type == 'Loamy':  
            if climate_zone == 'tropical':
                if temperature > 25:
                    # Tamil Nadu specific recommendations for hot weather
                    if 'tamil nadu' in location.lower() or 'tamilnadu' in location.lower() or any(city in location.lower() for city in ['chennai', 'madurai', 'coimbatore', 'salem', 'trichy', 'vellore']):
                        recommendations = ['Rice', 'Sugarcane', 'Banana', 'Mango', 'Coconut', 'Tapioca', 'Groundnut', 'Pulses']
                    else:
                        recommendations = ['Rice', 'Sugarcane', 'Banana', 'Mango', 'Papaya', 'Coconut']
                else:
                    if 'tamil nadu' in location.lower() or 'tamilnadu' in location.lower():
                        recommendations = ['Rice', 'Wheat', 'Maize', 'Pulses', 'Groundnut', 'Sunflower', 'Cotton']
                    else:
                        recommendations = ['Rice', 'Wheat', 'Corn', 'Soybeans', 'Peanuts']
            elif climate_zone == 'subtropical':
                if temperature > 20:
                    recommendations = ['Cotton', 'Sugarcane', 'Citrus', 'Avocado', 'Olives']
                else:
                    recommendations = ['Wheat', 'Barley', 'Oats', 'Peas', 'Lentils']
            elif climate_zone == 'temperate':
                if temperature > 15:
                    recommendations = ['Wheat', 'Corn', 'Soybeans', 'Sunflowers', 'Potatoes']
                else:
                    recommendations = ['Wheat', 'Barley', 'Oats', 'Rye', 'Peas']
            else:  # cold
                recommendations = ['Barley', 'Oats', 'Rye', 'Potatoes', 'Carrots']
                
        elif soil_type == 'Sandy':
            if climate_zone == 'tropical':
                if temperature > 25:
                    if 'tamil nadu' in location.lower() or 'tamilnadu' in location.lower():
                        recommendations = ['Groundnut', 'Tapioca', 'Sweet Potato', 'Onion', 'Garlic', 'Chilli', 'Tomato']
                    else:
                        recommendations = ['Peanuts', 'Watermelon', 'Sweet Potatoes', 'Cassava', 'Pineapple']
                else:
                    if 'tamil nadu' in location.lower() or 'tamilnadu' in location.lower():
                        recommendations = ['Groundnut', 'Potato', 'Onion', 'Garlic', 'Carrot', 'Radish']
                    else:
                        recommendations = ['Peanuts', 'Potatoes', 'Carrots', 'Onions', 'Garlic']
            elif climate_zone == 'subtropical':
                if temperature > 20:
                    recommendations = ['Peanuts', 'Watermelon', 'Cantaloupe', 'Sweet Corn', 'Tomatoes']
                else:
                    recommendations = ['Potatoes', 'Carrots', 'Radish', 'Turnips', 'Beets']
            elif climate_zone == 'temperate':
                if temperature > 15:
                    recommendations = ['Potatoes', 'Carrots', 'Onions', 'Garlic', 'Asparagus']
                else:
                    recommendations = ['Potatoes', 'Carrots', 'Radish', 'Turnips', 'Parsnips']
            else:  # cold
                recommendations = ['Potatoes', 'Carrots', 'Parsnips', 'Turnips', 'Radish']
                
        elif soil_type == 'Clay':
            if climate_zone == 'tropical':
                if temperature > 25:
                    if 'tamil nadu' in location.lower() or 'tamilnadu' in location.lower():
                        recommendations = ['Rice', 'Sugarcane', 'Cotton', 'Pulses', 'Sunflower', 'Groundnut']
                    else:
                        recommendations = ['Rice', 'Soybeans', 'Cabbage', 'Cauliflower', 'Broccoli']
                else:
                    if 'tamil nadu' in location.lower() or 'tamilnadu' in location.lower():
                        recommendations = ['Rice', 'Wheat', 'Pulses', 'Mustard', 'Sunflower']
                    else:
                        recommendations = ['Rice', 'Wheat', 'Barley', 'Mustard', 'Rapeseed']
            elif climate_zone == 'subtropical':
                if temperature > 20:
                    recommendations = ['Rice', 'Soybeans', 'Broccoli', 'Cabbage', 'Kale']
                else:
                    recommendations = ['Rice', 'Wheat', 'Barley', 'Mustard', 'Spinach']
            elif climate_zone == 'temperate':
                if temperature > 15:
                    recommendations = ['Rice', 'Soybeans', 'Broccoli', 'Cabbage', 'Cauliflower']
                else:
                    recommendations = ['Rice', 'Wheat', 'Barley', 'Mustard', 'Kale']
            else:  # cold
                recommendations = ['Rice', 'Wheat', 'Barley', 'Mustard', 'Spinach']
                
        elif soil_type == 'Silty':
            if climate_zone == 'tropical':
                if 'tamil nadu' in location.lower() or 'tamilnadu' in location.lower():
                    recommendations = ['Rice', 'Maize', 'Pulses', 'Groundnut', 'Sunflower', 'Cotton']
                else:
                    recommendations = ['Corn', 'Soybeans', 'Wheat', 'Alfalfa', 'Clover']
            elif climate_zone == 'subtropical':
                recommendations = ['Corn', 'Soybeans', 'Wheat', 'Alfalfa', 'Sunflowers']
            elif climate_zone == 'temperate':
                recommendations = ['Corn', 'Soybeans', 'Wheat', 'Alfalfa', 'Clover']
            else:  # cold
                recommendations = ['Wheat', 'Barley', 'Oats', 'Alfalfa', 'Clover']
                
        elif soil_type == 'Peaty':
            if climate_zone == 'tropical':
                if 'tamil nadu' in location.lower() or 'tamilnadu' in location.lower():
                    recommendations = ['Rice', 'Vegetables', 'Potato', 'Carrot', 'Onion', 'Garlic']
                else:
                    recommendations = ['Cranberries', 'Blueberries', 'Potatoes', 'Carrots', 'Celery']
            elif climate_zone == 'subtropical':
                recommendations = ['Blueberries', 'Strawberries', 'Potatoes', 'Carrots', 'Lettuce']
            elif climate_zone == 'temperate':
                recommendations = ['Cranberries', 'Blueberries', 'Potatoes', 'Carrots', 'Celery']
            else:  # cold
                recommendations = ['Cranberries', 'Blueberries', 'Potatoes', 'Carrots', 'Parsnips']
                
        elif soil_type == 'Chalky':
            if climate_zone == 'tropical':
                if 'tamil nadu' in location.lower() or 'tamilnadu' in location.lower():
                    recommendations = ['Millets', 'Pulses', 'Oilseeds', 'Spices', 'Medicinal Plants']
                else:
                    recommendations = ['Lavender', 'Rosemary', 'Sage', 'Thyme', 'Oregano']
            elif climate_zone == 'subtropical':
                recommendations = ['Lavender', 'Rosemary', 'Sage', 'Thyme', 'Basil']
            elif climate_zone == 'temperate':
                recommendations = ['Lavender', 'Rosemary', 'Sage', 'Thyme', 'Oregano']
            else:  # cold
                recommendations = ['Lavender', 'Rosemary', 'Sage', 'Thyme', 'Mint']
        else:
            # Default recommendations
            if 'tamil nadu' in location.lower() or 'tamilnadu' in location.lower():
                recommendations = ['Rice', 'Wheat', 'Maize', 'Pulses', 'Groundnut', 'Sunflower']
            else:
                recommendations = ['Wheat', 'Barley', 'Oats', 'Corn', 'Soybeans']
        
        return jsonify({
            "recommendations": recommendations,
            "soil_type": soil_type,
            "location": location,
            "climate_zone": climate_zone,
            "temperature": temperature,
            "message": f"Recommended {len(recommendations)} plants for {soil_type} soil in {climate_zone} climate"
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/detect-disease', methods=['POST'])
def detect_disease():
    """Detect disease from uploaded leaf image"""
    if not model_loaded:
        return jsonify({'error': 'Model not loaded'}), 500
    
    if 'leaf' not in request.files:
        return jsonify({'error': 'No leaf image uploaded'}), 400
    
    try:
        file = request.files['leaf']
        
        # For now, return a mock response since the model isn't trained yet
        # This will be replaced with actual model prediction later
        detected_disease = random.choice(class_names)
        confidence = round(random.uniform(75.0, 95.0), 2)
        
        # Validate that the file is an image
        try:
            img = Image.open(file.stream)
            img.verify()  # Verify it's actually an image
        except Exception as img_error:
            return jsonify({'error': 'Invalid image file'}), 400

        return jsonify({
            "disease": detected_disease,
            "confidence": confidence
        })
    except Exception as e:
        import traceback
        print(f"Error in disease detection: {e}")
        traceback.print_exc()
        return jsonify({'error': f'Error processing image: {str(e)}'}), 500

if __name__ == '__main__':
    app.run(debug=True)
